/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <xparameters.h>
#include <xiomodule.h>

// control pin mask
#define NEO_TX_EN		0x01 // active high
#define NEO_TX_MODE		0x02 // 1 = 800khz, 0 = 400khz
#define NEO_TX_CMD		0x04 // 1 = rgb data, 0 = reset msg
#define NEO_TX_WR		0x10 // 1 = write, 0 = nothing
#define NEO_TX_RST		0x20 // active low

#define NEO_DEF_CTRL	0x02 // 800khz mode, in reset mode

#define NEO_CTRL_PORT 	1
#define NEO_DATA_PORT 	2

XIOModule neoPixel;

void wait10() {

	u8 i;

	// 10 cycle wait (200ns at 50MHz)
	for(i = 0; i < 10; i++);
}



int main()
{
	u32 ctrlReg = NEO_DEF_CTRL;

	XIOModule_Initialize(&neoPixel, XPAR_IOMODULE_0_DEVICE_ID); // Initialize the interface

	XIOModule_Start(&neoPixel); // start the module

	// set the control port to the default setting and zero the data port
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	XIOModule_DiscreteWrite(&neoPixel, NEO_DATA_PORT, 0x000000);
	wait10();

	// bring the neopixel tx out of reset wait a few cycles then load data into the fifo
	ctrlReg |= NEO_TX_RST; // get out reset mode
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	wait10();

	ctrlReg |= NEO_TX_WR; // fifo write rst cmd
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	wait10();

	ctrlReg &= (~NEO_TX_WR & 0x0000001F); // bring write low and put data on bus
	ctrlReg |= NEO_TX_CMD; // set the next command to data
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	XIOModule_DiscreteWrite(&neoPixel, NEO_DATA_PORT, 0xFF2B15);
	wait10();

	ctrlReg |= NEO_TX_WR; // fifo write data
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	wait10();

	ctrlReg &= (~NEO_TX_WR & 0x0000001F); // bring write low
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	wait10();

	ctrlReg |= NEO_TX_EN; // enable the neopixel tx
	XIOModule_DiscreteWrite(&neoPixel, NEO_CTRL_PORT, ctrlReg);
	wait10();

    return 0;
}





int main() {


    microblaze_register_handler(XIOModule_DeviceInterruptHandler,
            XPAR_IOMODULE_0_DEVICE_ID); // register the interrupt handler

     // start the GPO module

    XIOModule_Connect(&gpo, XIN_IOMODULE_FIT_1_INTERRUPT_INTR, timerTick,
            NULL); // register timerTick() as our interrupt handler
    XIOModule_Enable(&gpo, XIN_IOMODULE_FIT_1_INTERRUPT_INTR); // enable the interrupt

    microblaze_enable_interrupts(); // enable global interrupts

    u8 leds = 0;
    while (1){
        // write the LED value to port 1 (you can have up to 4 ports)
        XIOModule_DiscreteWrite(&gpo, 1, leds++);
        delay(1000); // delay one second
    }
}
